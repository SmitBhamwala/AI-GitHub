// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  role          UserRole  @default(USER)

  credits Int @default(150)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userToProjects UserToProject[]
  questionsAsked Questions[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name      String
  gitHubURL String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userToProjects UserToProject[]

  commits              Commits[]
  SourceCodeEmbeddings SourceCodeEmbeddings[]
  savedQuestions       Questions[]

  @@map("projects")
}

model UserToProject {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("userToProject")
}

model SourceCodeEmbeddings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  summaryEmbedding Float[]

  sourceCode String
  fileName   String
  summary    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id])

  @@map("sourceCodeEmbeddings")
}

model Questions {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  question String
  answer   String

  fileReferences Json?

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("questions")
}

model Commits {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime

  //ai summary
  summary String

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id])

  @@map("commits")
}
